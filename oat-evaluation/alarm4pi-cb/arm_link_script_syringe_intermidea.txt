/* Script for -z combreloc: combine and sort reloc sections */
/* Copyright (C) 2014-2016 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm",
        "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)
SEARCH_DIR("=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/arm-linux-gnueabihf/_build/builds/destdir/x86_64-unknown-linux-gnu/arm-linux-gnueabihf/lib"); SEARCH_DIR("=/usr/local/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib");
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x00010000)); . = SEGMENT_START("text-segment", 0x00010000) + SIZEOF_HEADERS;
  .interp         : { *(.interp) }
  .note.gnu.build-id : { *(.note.gnu.build-id) }
  .hash           : { *(.hash) }
  .gnu.hash       : { *(.gnu.hash) }
  .dynsym         : { *(.dynsym) }
  .dynstr         : { *(.dynstr) }
  .gnu.version    : { *(.gnu.version) }
  .gnu.version_d  : { *(.gnu.version_d) }
  .gnu.version_r  : { *(.gnu.version_r) }
  .rel.dyn        :
    {
      *(.rel.init)
      *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
      *(.rel.fini)
      *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
      *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
      *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
      *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
      *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
      *(.rel.ctors)
      *(.rel.dtors)
      *(.rel.got)
      *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
      PROVIDE_HIDDEN (__rel_iplt_start = .);
      *(.rel.iplt)
      PROVIDE_HIDDEN (__rel_iplt_end = .);
    }
  .rela.dyn       :
    {
      *(.rela.init)
      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
      *(.rela.fini)
      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
      *(.rela.ctors)
      *(.rela.dtors)
      *(.rela.got)
      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
      PROVIDE_HIDDEN (__rela_iplt_start = .);
      *(.rela.iplt)
      PROVIDE_HIDDEN (__rela_iplt_end = .);
    }
  .rel.plt        :
    {
      *(.rel.plt)
    }
  .rela.plt       :
    {
      *(.rela.plt)
    }
  .init           :
  {
    KEEP (*(SORT_NONE(.init)))
  }
  .plt            : { *(.plt) }
  .iplt           : { *(.iplt) }

  /* Initialized data sections goes into RAM, load LMA copy after code */
	.DATA_REGION_0__vma_start = LOADADDR(.DATA_REGION_0__data);
	.DATA_REGION_0__data ALIGN(2):
	{
	.DATA_REGION_0__data_start = .;
	. = ALIGN(2);
	.DATA_REGION_0__mpu_start = .;
	*(.DATA_REGION_0__data);
	*(.DATA_REGION_0__data*);
	. = ALIGN(4);
	.DATA_REGION_0__data_end = .;
	} 

	.DATA_REGION_1__svma_start = LOADADDR(.DATA_REGION_1__share);
	.DATA_REGION_1__share ALIGN(2):
	{
	.DATA_REGION_1__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_1__smpu_start = .;
	*(.DATA_REGION_1__share);
	*(.DATA_REGION_1__share*);
	. = ALIGN(4);
	.DATA_REGION_1__sdata_end = .;
	} 

	.DATA_REGION_1__vma_start = LOADADDR(.DATA_REGION_1__data);
	.DATA_REGION_1__data ALIGN(4):
	{
	.DATA_REGION_1__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_1__mpu_start = .;
	*(.DATA_REGION_1__data);
	*(.DATA_REGION_1__data*);
	. = ALIGN(4);
	.DATA_REGION_1__data_end = .;
	} 

	.DATA_REGION_1__bss : 
	{
	.DATA_REGION_1__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_1__bss);
	*(.DATA_REGION_1__bss*);
	. = ALIGN(4);
	.DATA_REGION_1__bss_end = .;
	} 

	.CODE_REGION_1_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_1__start = .);
	*(.CODE_REGION_1_);
	*(.CODE_REGION_1_*);
	PROVIDE(.CODE_REGION_1__end = . );
	} 

	.DATA_REGION_2__svma_start = LOADADDR(.DATA_REGION_2__share);
	.DATA_REGION_2__share ALIGN(2):
	{
	.DATA_REGION_2__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_2__smpu_start = .;
	*(.DATA_REGION_2__share);
	*(.DATA_REGION_2__share*);
	. = ALIGN(4);
	.DATA_REGION_2__sdata_end = .;
	} 

	.CODE_REGION_2_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_2__start = .);
	*(.CODE_REGION_2_);
	*(.CODE_REGION_2_*);
	PROVIDE(.CODE_REGION_2__end = . );
	} 

	.DATA_REGION_3__svma_start = LOADADDR(.DATA_REGION_3__share);
	.DATA_REGION_3__share ALIGN(2):
	{
	.DATA_REGION_3__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_3__smpu_start = .;
	*(.DATA_REGION_3__share);
	*(.DATA_REGION_3__share*);
	. = ALIGN(4);
	.DATA_REGION_3__sdata_end = .;
	} 

	.CODE_REGION_3_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_3__start = .);
	*(.CODE_REGION_3_);
	*(.CODE_REGION_3_*);
	PROVIDE(.CODE_REGION_3__end = . );
	} 

	.DATA_REGION_4__svma_start = LOADADDR(.DATA_REGION_4__share);
	.DATA_REGION_4__share ALIGN(2):
	{
	.DATA_REGION_4__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_4__smpu_start = .;
	*(.DATA_REGION_4__share);
	*(.DATA_REGION_4__share*);
	. = ALIGN(4);
	.DATA_REGION_4__sdata_end = .;
	} 

	.DATA_REGION_4__vma_start = LOADADDR(.DATA_REGION_4__data);
	.DATA_REGION_4__data ALIGN(4):
	{
	.DATA_REGION_4__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_4__mpu_start = .;
	*(.DATA_REGION_4__data);
	*(.DATA_REGION_4__data*);
	. = ALIGN(4);
	.DATA_REGION_4__data_end = .;
	} 

	.DATA_REGION_4__bss : 
	{
	.DATA_REGION_4__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_4__bss);
	*(.DATA_REGION_4__bss*);
	. = ALIGN(4);
	.DATA_REGION_4__bss_end = .;
	} 

	.CODE_REGION_4_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_4__start = .);
	*(.CODE_REGION_4_);
	*(.CODE_REGION_4_*);
	PROVIDE(.CODE_REGION_4__end = . );
	} 

	.DATA_REGION_5__svma_start = LOADADDR(.DATA_REGION_5__share);
	.DATA_REGION_5__share ALIGN(2):
	{
	.DATA_REGION_5__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_5__smpu_start = .;
	*(.DATA_REGION_5__share);
	*(.DATA_REGION_5__share*);
	. = ALIGN(4);
	.DATA_REGION_5__sdata_end = .;
	} 

	.DATA_REGION_5__vma_start = LOADADDR(.DATA_REGION_5__data);
	.DATA_REGION_5__data ALIGN(4):
	{
	.DATA_REGION_5__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_5__mpu_start = .;
	*(.DATA_REGION_5__data);
	*(.DATA_REGION_5__data*);
	. = ALIGN(4);
	.DATA_REGION_5__data_end = .;
	} 

	.DATA_REGION_5__bss : 
	{
	.DATA_REGION_5__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_5__bss);
	*(.DATA_REGION_5__bss*);
	. = ALIGN(4);
	.DATA_REGION_5__bss_end = .;
	} 

	.CODE_REGION_5_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_5__start = .);
	*(.CODE_REGION_5_);
	*(.CODE_REGION_5_*);
	PROVIDE(.CODE_REGION_5__end = . );
	} 

	.DATA_REGION_6__svma_start = LOADADDR(.DATA_REGION_6__share);
	.DATA_REGION_6__share ALIGN(2):
	{
	.DATA_REGION_6__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_6__smpu_start = .;
	*(.DATA_REGION_6__share);
	*(.DATA_REGION_6__share*);
	. = ALIGN(4);
	.DATA_REGION_6__sdata_end = .;
	} 

	.DATA_REGION_6__vma_start = LOADADDR(.DATA_REGION_6__data);
	.DATA_REGION_6__data ALIGN(4):
	{
	.DATA_REGION_6__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_6__mpu_start = .;
	*(.DATA_REGION_6__data);
	*(.DATA_REGION_6__data*);
	. = ALIGN(4);
	.DATA_REGION_6__data_end = .;
	} 

	.DATA_REGION_6__bss : 
	{
	.DATA_REGION_6__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_6__bss);
	*(.DATA_REGION_6__bss*);
	. = ALIGN(4);
	.DATA_REGION_6__bss_end = .;
	} 

	.CODE_REGION_6_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_6__start = .);
	*(.CODE_REGION_6_);
	*(.CODE_REGION_6_*);
	PROVIDE(.CODE_REGION_6__end = . );
	} 

	.DATA_REGION_7__svma_start = LOADADDR(.DATA_REGION_7__share);
	.DATA_REGION_7__share ALIGN(2):
	{
	.DATA_REGION_7__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_7__smpu_start = .;
	*(.DATA_REGION_7__share);
	*(.DATA_REGION_7__share*);
	. = ALIGN(4);
	.DATA_REGION_7__sdata_end = .;
	} 

	.DATA_REGION_7__vma_start = LOADADDR(.DATA_REGION_7__data);
	.DATA_REGION_7__data ALIGN(4):
	{
	.DATA_REGION_7__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_7__mpu_start = .;
	*(.DATA_REGION_7__data);
	*(.DATA_REGION_7__data*);
	. = ALIGN(4);
	.DATA_REGION_7__data_end = .;
	} 

	.DATA_REGION_7__bss : 
	{
	.DATA_REGION_7__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_7__bss);
	*(.DATA_REGION_7__bss*);
	. = ALIGN(4);
	.DATA_REGION_7__bss_end = .;
	} 

	.CODE_REGION_7_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_7__start = .);
	*(.CODE_REGION_7_);
	*(.CODE_REGION_7_*);
	PROVIDE(.CODE_REGION_7__end = . );
	} 

	.DATA_REGION_8__svma_start = LOADADDR(.DATA_REGION_8__share);
	.DATA_REGION_8__share ALIGN(2):
	{
	.DATA_REGION_8__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_8__smpu_start = .;
	*(.DATA_REGION_8__share);
	*(.DATA_REGION_8__share*);
	. = ALIGN(4);
	.DATA_REGION_8__sdata_end = .;
	} 

	.DATA_REGION_8__vma_start = LOADADDR(.DATA_REGION_8__data);
	.DATA_REGION_8__data ALIGN(4):
	{
	.DATA_REGION_8__data_start = .;
	. = ALIGN(4);
	.DATA_REGION_8__mpu_start = .;
	*(.DATA_REGION_8__data);
	*(.DATA_REGION_8__data*);
	. = ALIGN(4);
	.DATA_REGION_8__data_end = .;
	} 

	.DATA_REGION_8__bss : 
	{
	.DATA_REGION_8__bss_start = .;
	. = ALIGN(4);
	*(.DATA_REGION_8__bss);
	*(.DATA_REGION_8__bss*);
	. = ALIGN(4);
	.DATA_REGION_8__bss_end = .;
	} 

	.CODE_REGION_8_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_8__start = .);
	*(.CODE_REGION_8_);
	*(.CODE_REGION_8_*);
	PROVIDE(.CODE_REGION_8__end = . );
	} 

	.DATA_REGION_9__svma_start = LOADADDR(.DATA_REGION_9__share);
	.DATA_REGION_9__share ALIGN(2):
	{
	.DATA_REGION_9__sdata_start = .;
	. = ALIGN(2);
	.DATA_REGION_9__smpu_start = .;
	*(.DATA_REGION_9__share);
	*(.DATA_REGION_9__share*);
	. = ALIGN(4);
	.DATA_REGION_9__sdata_end = .;
	} 

	.CODE_REGION_9_  ALIGN(4): 
	{
	PROVIDE(.CODE_REGION_9__start = .);
	*(.CODE_REGION_9_);
	*(.CODE_REGION_9_*);
	PROVIDE(.CODE_REGION_9__end = . );
	} 

  .text           :
  {
    *(.text.unlikely .text.*_unlikely .text.unlikely.*)
    *(.text.exit .text.exit.*)
    *(.text.startup .text.startup.*)
    *(.text.hot .text.hot.*)
    *(.text .stub .text.* .gnu.linkonce.t.*)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)
  }
  .fini           :
  {
    KEEP (*(SORT_NONE(.fini)))
  }
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
  .rodata1        : { *(.rodata1) }
  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) }
   PROVIDE_HIDDEN (__exidx_start = .);
  .ARM.exidx   : { *(.ARM.exidx* .gnu.linkonce.armexidx.*) }
   PROVIDE_HIDDEN (__exidx_end = .);
  .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
  .gcc_except_table.*) }
  .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
  /* These sections are generated by the Sun/Oracle C++ compiler.  */
  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
  .exception_ranges*) }
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
  /* Exception handling  */
  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
  .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
  /* Thread Local Storage sections  */
  .tdata    : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
  .tbss     : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  }
  .init_array     :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
    PROVIDE_HIDDEN (__init_array_end = .);
  }
  .fini_array     :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
    PROVIDE_HIDDEN (__fini_array_end = .);
  }
  .ctors          :
  {
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
  }
  .dtors          :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
  }
  .jcr            : { KEEP (*(.jcr)) }
  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
  .dynamic        : { *(.dynamic) }
  . = DATA_SEGMENT_RELRO_END (0, .);
  .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
  .data           :
  {
    PROVIDE (__data_start = .);
    *(.data .data.* .gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
  }
  /* Remove information from the standard libraries */
  .data1          : { *(.data1) }
  _edata = .; PROVIDE (edata = .);
  . = .;
  __bss_start = .;
  __bss_start__ = .;
  .bss            :
  {
   *(.dynbss)
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.
      FIXME: Why do we need it? When there is no .bss section, we don't
      pad the .data section.  */
   . = ALIGN(. != 0 ? 32 / 8 : 1);
  }
  _bss_end__ = . ; __bss_end__ = . ;
  . = ALIGN(32 / 8);
  . = SEGMENT_START("ldata-segment", .);
  . = ALIGN(32 / 8);
  __end__ = . ;
  _end = .; PROVIDE (end = .);
  . = DATA_SEGMENT_END (.);
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) }
  .debug_addr     0 : { *(.debug_addr) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  .note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}